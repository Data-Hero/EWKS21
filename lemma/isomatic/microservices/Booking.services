import datatypes from "../domain/Booking.data" as domain
import datatypes from "../domain/User.data" as user
import technology from "../technology/JavaSpring.technology" as JavaSpring

@technology(JavaSpring)
@JavaSpring::_aspects.CrossOrigin("*")
@JavaSpring::_aspects.Port(8084)
public functional microservice de.joergiso.isomatic.Booking {
	interface BookingController {
	---
	Acess CRUD functionality inside Booking Microservice

	---

	@JavaSpring::_aspects.GetMapping
	getAllBookings(
		@JavaSpring::_aspects.ResponseStatus("200") @JavaSpring::_aspects.ResponseEntity  sync out bookings: domain::Booking.Bookings
	);

	@JavaSpring::_aspects.GetMapping
	getBookingForUser(
		@JavaSpring::_aspects.PathVariable sync in userId : user::User.User,
		@JavaSpring::_aspects.ResponseStatus("200") @JavaSpring::_aspects.ResponseEntity sync out bookings: domain::Booking.Bookings
	);

	@JavaSpring::_aspects.GetMapping
	getAllFunctionBundles(
		@JavaSpring::_aspects.ResponseStatus("200") @JavaSpring::_aspects.ResponseEntity  sync out bookings: domain::Booking.FunctionBundles
	);

	@JavaSpring::_aspects.GetMapping
	getAvailableFunctionBundles(
		@JavaSpring::_aspects.PathVariable sync in userId : user::User.User,
		@JavaSpring::_aspects.ResponseStatus("200")  @JavaSpring::_aspects.ResponseEntity  sync out bookings: domain::Booking.FunctionBundles
	);

	@JavaSpring::_aspects.PostMapping
	bookFunctionBundle(
		@JavaSpring::_aspects.PathVariable sync in functionBundleId: domain::Booking.FunctionBundle,
		@JavaSpring::_aspects.RequestBody sync in functionBundle: domain::Booking.Booking
	);

	@JavaSpring::_aspects.PostMapping
	addFunctionBundle(
		@JavaSpring::_aspects.RequestBody sync in functionBundle: domain::Booking.FunctionBundle
	);

	}
}
